from telebot import *
from time import *
from random import *

API_TOKEN = '8001281886:AAGB1apo5WMuBr1VBDQYyESCGg-rOTHgf40'
bot = telebot.TeleBot(API_TOKEN)

users = {}

rooms = {"üíª IT":'it',
		"üé∏ –ú—É–∑—ã–∫–∞":'music',
		"üéô –ê–∫—Ç–æ–≤—ã–π –∑–∞–ª":'act',
		"üçï –°—Ç–æ–ª–æ–≤–∞—è":'table',
		"üìñ –£—á–∏—Ç–µ–ª—å—Å–∫–∞—è":'teachers_room',
		" –ú–µ–¥. –ø—É–Ω–∫—Ç":'med_punckt',
		"–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞":'robot',
		"–ê—Ä—Ç":'art',
		"–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–ª.":'little_class',
		"–î–∏—Ä–µ–∫—Ç–æ—Ä—Å–∫–∞—è":'director',—Ö
		"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è":'laborant',
		"–ö–ª–∞—Å—Å—ã":'class',
		"–î–≤–æ—Ä":'dvor',
		"–û—Ö—Ä–∞–Ω–∞":'security',
		"–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∑–æ–Ω–∞":'sport_zone',
		"0 —ç—Ç–∞–∂":'0_th',
		"1 —ç—Ç–∞–∂":'1_st',
		"2 —ç—Ç–∞–∂":'2_nd',
		"–ù–∞—á–∞–ª–æ":'start'}

@bot.message_handler(commands=['start'])
def welcome(message):
	if not message.chat.id in users
		users[message.chat.id] = False
	bot.send_message(message.chat.id, f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ {message.chat.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—É AIL. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã —É–∑–Ω–∞—Ç—å?")
	bot.send_message(message.chat.id, "/excursion - –ü—Ä–æ–≤–µ–¥–µ–º —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ –Ω–∞—à–µ–π —à–∫–æ–ª–µ! \n/wordly - –∏–≥—Ä–∞ –≤ –≤–æ—Ä–¥–ª–∏ \n/help - –ø–æ–º–æ—â—å")
	file = open('AIL_Start.png', 'rb')
	bot.send_photo(message.chat.id, file)


# @bot.message_handler(commands=['wordly'])
# def wordly(message):
#     global word,  unword, word_back, active, iol
#     words = "–∑–∞–≤–æ–¥ –Ω–∞–≤–æ–∑ —Å–æ—Å–Ω–∞ –º—è—á–∏–∫ –∑–∞–º–æ–∫ –∞–∫—Ç—ë—Ä –±–∞–Ω–∞–Ω –±–∞—Ä–∏–Ω –±–∞—Ä–∫–∞ –±–∏—Å–µ—Ä –±–ª–∞–≥–æ –±–æ–º–±–∞ –±—É—Ä–∫–∞ –≤–∞–ª–µ—Ç –≤–∞—Ä–∫–∞ –≤–∏–ª–∫–∞ –≤–∏—Å–∫–∏ –≤–æ—Ä–æ–Ω –≥—Ä—É—à–∞ –¥—É–º–∫–∞".split()
#     word = choice(words).upper()
#     word = list(word)
#     word_back = "".join(word)
#     word_back = word_back.capitalize()
#     iol = -1
#     unword = ""
#     # bot.send_message(message.chat.id, "\n".join([" ".join(unword[i*5:i*5+5]) for i in range(5)]))
#     bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ')
#     active = True
#     bot.register_next_step_handler(message, start_game)

# def start_game(message):
#     global iol, active, unword
#     if active:
#         iol = iol + 1
#         input_word = message.text.upper()
#         if len(input_word) > 5 or len(input_word) < 5:
#             bot.send_message(message.chat.id, '–í–∞—à–µ —Å–ª–æ–≤–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 5 –±—É–∫–≤!!')
#             bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ')
#             iol = iol - 1
#             bot.register_next_step_handler(message, start_game)
#         else:
#             input_word = list(input_word)
#             unword = unword + find(word, input_word)
#             bot.send_message(message.chat.id,"\n".join([" ".join(unword[i*5:i*5+5]) for i in range(len(unword)//5)]))
#             bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ')
#             bot.register_next_step_handler(message,start_game)  
#             if input_word == word:
#                 bot.send_message(message.chat.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ, –∑–∞–≥–æ–¥–∞–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: <b>{word_back}</b>", parse_mode="HTML")
#                 active = False
#             elif iol == 4:
#                 bot.send_message(message.chat.id,f"–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–∞, –∑–∞–≥–æ–¥–∞–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: <b>{word_back}</b>", parse_mode="HTML")
#                 active = False

# def find(word, input_word):
#     for b in range(0,5):
#         r = ""
#         for b in range(0,5):
#             if input_word[b] == word[b]:
#                 r = r + input_word[b].upper()
#             elif input_word[b] in word:
#                 r = r + input_word[b].lower()
#             else:
#                 r = r + '_'
#         return r


# unword = "dfagdfvasdhfsgahjthhyaerh5yrhysf"
# print("\n".join([" ".join(unword[i*5:i*5+5]) for i in range(5)]))

@bot.message_handler(commands=['excursion'])
def excursion(message):
	bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —à–∫–æ–ª—Éüòé! –ê–∫–∞–¥–µ–º–∏—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞!')
	markup = types.InlineKeyboardMarkup()
	item1 = types.InlineKeyboardButton("–ü–æ—ç—Ç–∞–ø–Ω–æ", callback_data='step')
	item2 = types.InlineKeyboardButton("–í—ã–±–æ—Ä–æ—á–Ω–æ", callback_data='choice')
	markup.row(item1,item2)
	bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —ç–∫—Å–∫—É—Ä—Å–∏–∏: ', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
	if callback.data == 'step':
		pass  

	elif callback.data == 'start':
		bot.send_message(callback.message.chat.id, '–í—ã –≤—Ä–µ–Ω—É–ª–∏—Å—å –Ω–∞ –Ω–∞—á–∞–ª–æ. \n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º: ')
		markup = types.InlineKeyboardMarkup(row_width=3)
		markup.add(*[types.InlineKeyboardButton(room, callback_data=rooms[room]) for room in rooms])
		bot.send_message(callback.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç: ', reply_markup=markup)
	elif callback.data == 'choice':
		bot.send_message(callback.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —ç–∫—Å–∫—É—Ä—Å–∏—é –≤—ã–±–æ—Ä–æ—á–Ω–æ. \n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º: ')
		markup = types.InlineKeyboardMarkup(row_width=3)
		markup.add(*[types.InlineKeyboardButton(room, callback_data=rooms[room]) for room in rooms])
		bot.send_message(callback.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç: ', reply_markup=markup)
	elif callback.data == 'it':
		markup = types.InlineKeyboardMarkup(row_width=3)
		local_rooms = {"–ú—É–∑—ã–∫–∞","–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª","–°—Ç–æ–ª–æ–≤–∞—è","0 —ç—Ç–∞–∂"}
		markup.add(*[types.InlineKeyboardButton(room, callback_data=rooms[room]) for room in local_rooms])
		bot.send_message(callback.message.chat.id, '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏. \n–†—è–¥–æ–º —Å –Ω–∏–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è: ', reply_markup=markup)
	elif callback.data == 'music':
		markup = types.InlineKeyboardMarkup(row_width=3)
		local_rooms = {"IT","–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª","–°—Ç–æ–ª–æ–≤–∞—è","0 —ç—Ç–∞–∂"}
		markup.add(*[types.InlineKeyboardButton(room, callback_data=rooms[room]) for room in local_rooms])
		bot.send_message(callback.message.chat.id, '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç –º—É–∑—ã–∫–∏. \n–†—è–¥–æ–º —Å –Ω–∏–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è: ', reply_markup=markup)
	elif callback.data == 'act':
		markup = types.InlineKeyboardMarkup(row_width=3)
		local_rooms = {"IT","–ú—É–∑—ã–∫–∞","–°—Ç–æ–ª–æ–≤–∞—è","0 —ç—Ç–∞–∂"}
		markup.add(*[types.InlineKeyboardButton(room, callback_data=rooms[room]) for room in local_rooms])
		bot.send_message(callback.message.chat.id, '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç –∞–∫—Ç–æ–≥–æ–≥–æ –∑–∞–ª–∞. \n–†—è–¥–æ–º —Å –Ω–∏–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è: ', reply_markup=markup)
	elif callback.data == 'table':
		markup = types.InlineKeyboardMarkup(row_width=3)
		local_rooms = {"IT","–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª","–ú—É–∑—ã–∫–∞","0 —ç—Ç–∞–∂"}
		markup.add(*[types.InlineKeyboardButton(room, callback_data=rooms[room]) for room in local_rooms])
		bot.send_message(callback.message.chat.id, '–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Å—Ç–æ–ª–æ–≤—É—é. \n–†—è–¥–æ–º —Å –Ω–∏–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è: ', reply_markup=markup)
	elif callback.data == '0_th':
		markup = types.InlineKeyboardMarkup(row_width=3)
		local_rooms = {"IT","–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª","–°—Ç–æ–ª–æ–≤–∞—è","–ú—É–∑—ã–∫–∞"}
		markup.add(*[types.InlineKeyboardButton(room, callback_data=rooms[room]) for room in local_rooms])
		bot.send_message(callback.message.chat.id, '–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ 0-–æ–π —ç—Ç–∞–∂. \n–ù–∞ 0-–æ–º —ç—Ç–∞–∂–µ –µ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã: ', reply_markup=markup)

	elif callback.data == '1_st':
		markup = types.InlineKeyboardMarkup(row_width=3)
		local_rooms = {"–£—á–∏—Ç–µ–ª—å—Å–∫–∞—è","–ú–µ–¥. –ø—É–Ω–∫—Ç","–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞","–ê—Ä—Ç"}
		markup.add(*[types.InlineKeyboardButton(room, callback_data=rooms[room]) for room in local_rooms])
		bot.send_message(callback.message.chat.id, '–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ 1-—ã–π —ç—Ç–∞–∂. \n–Ω–∞ 1-–æ–º —ç—Ç–∞–∂–µ –µ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã: ', reply_markup=markup)




@bot.message_handler(commands=['help'])
def help(message):
	bot.send_message(message.chat.id, "/excursion - –ü—Ä–æ–≤–µ–¥–µ–º —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ –Ω–∞—à–µ–π —à–∫–æ–ª–µ! \n/wordly - –∏–≥—Ä–∞ –≤ –≤–æ—Ä–¥–ª–∏ \n/help - –ø–æ–º–æ—â—å")




if __name__ == '__main__':
	bot.polling(none_stop=True)
